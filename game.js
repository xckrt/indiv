let board;
let cells;
let mines = [];
let firstClick = true;
let timer;
let timeElapsed = 0;
let level = 1;
let openCellsCount = 0;

const levels = [
    { time: 120, mines: 10, rows: 5, cols: 5 },  // –£—Ä–æ–≤–µ–Ω—å 1
    { time: 180, mines: 20, rows: 6, cols: 6 }, // –£—Ä–æ–≤–µ–Ω—å 2
    { time: 300, mines: 30, rows: 8, cols: 8 }  // –£—Ä–æ–≤–µ–Ω—å 3
];

function startGame() {
    clearInterval(timer);
    resetGameVariables();
    createGameBoard();
    setupGameInterface();
}

function resetGameVariables() {
    timeElapsed = 0;
    firstClick = true;
    openCellsCount = 0;
    mines = [];
    board = document.getElementById('board');
    board.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
}

function createGameBoard() {
    const currentLevel = levels[level - 1];
    board.style.gridTemplateColumns = `repeat(${currentLevel.cols}, 40px)`;

    for (let i = 0; i < currentLevel.rows * currentLevel.cols; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        board.appendChild(cell);
    }

    cells = document.querySelectorAll('.cell');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    board.addEventListener('click', (e) => {
        if (e.target.classList.contains('cell')) {
            const index = Array.from(cells).indexOf(e.target);
            handleCellClick(index);
        }
    });

    board.addEventListener('contextmenu', (e) => {
        e.preventDefault();
        if (e.target.classList.contains('cell')) {
            const index = Array.from(cells).indexOf(e.target);
            handleCellRightClick(e, index);
        }
    });
}

document.addEventListener("DOMContentLoaded", () => {
    setupGameInterface();
});

function setupGameInterface() {
    const timerElement = document.getElementById("timer");
    const minesElement = document.getElementById("mines");
    const startButton = document.getElementById("start-button");

    if (!timerElement || !minesElement || !startButton) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!");
        return;
    }

    timerElement.innerText = "02:00";
    minesElement.innerText = "10";

    startButton.addEventListener("click", () => {
        console.log("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
    });
}

function handleCellClick(index) {
    console.log("–ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ:", index);
    const cell = cells[index];

    if (firstClick) {
        generateMines(index);  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã
        openSafeZone(index);  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É
        firstClick = false;
        startTimer();  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    }
    if (cell.innerHTML > 0) {
        console.log("–û—Ç–∫—Ä—ã–≤–∞—é –º–∏–Ω—ã")
        highlightPotentialMines(index);
    }
    if (mines.includes(index)) {  // –ï—Å–ª–∏ –º–∏–Ω–∞
        revealMines();  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã
        clearInterval(timer);  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        showGameOverModal('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
    } else if (!cell.classList.contains('flag')) {
        openCell(index);  // –û—Ç–∫—Ä—ã—Ç—å —è—á–µ–π–∫—É
        checkWin();  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à
    }
}

function handleCellRightClick(e, index) {
    const cell = cells[index];
    if (!cell.classList.contains('open')) {
        cell.classList.toggle('flag');
        cell.innerHTML = cell.classList.contains('flag') ? 'üè¥' : '';
    }
}

function generateMines(firstIndex) {
    const currentLevel = levels[level - 1];
    const safeZone = getSafeZoneIndices(firstIndex, currentLevel); 

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞ –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —è—á–µ–π–∫–∞—Ö
    const availableCells = Array.from({ length: currentLevel.rows * currentLevel.cols }, (_, i) => i)
        .filter(i => !safeZone.includes(i));

    while (mines.length < currentLevel.mines) {
        let randomIndex = availableCells[Math.floor(Math.random() * availableCells.length)];
        if (!mines.includes(randomIndex)) {
            mines.push(randomIndex); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∏–Ω—ã
        }
    }
}

function openSafeZone(index) {
    const safeZone = getSafeZoneIndices(index, levels[level - 1]); 
    safeZone.forEach(i => {
        const cell = cells[i];
        if (!cell.classList.contains('mine') && !cell.classList.contains('open')) {
            openCell(i);
        }
    });
}

function getSafeZoneIndices(index, level) {
    const safeZone = [index];
    const directions = [
        { row: -1, col: -1 }, { row: -1, col: 0 }, { row: -1, col: 1 },
        { row: 0, col: -1 },                       { row: 0, col: 1 },
        { row: 1, col: -1 }, { row: 1, col: 0 }, { row: 1, col: 1 }
    ];

    for (let rowOffset = -1; rowOffset <= 1; rowOffset++) {
        for (let colOffset = -1; colOffset <= 1; colOffset++) {
            let newRow = Math.floor(index / level.cols) + rowOffset;
            let newCol = (index % level.cols) + colOffset;
            let newIndex = newRow * level.cols + newCol;

            if (newRow >= 0 && newRow < level.rows && newCol >= 0 && newCol < level.cols) {
                safeZone.push(newIndex);
            }
        }
    }

    const maxSafeZoneSize = Math.floor(level.rows * level.cols / 2);
    return Array.from(new Set(safeZone.slice(0, maxSafeZoneSize))); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã
}

function openCell(index) {
    const cell = cells[index];
    if (cell.classList.contains('open') || cell.classList.contains('flag')) return;  // –Ø—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ —Ñ–ª–∞–≥

    cell.classList.add('open');
    cell.classList.add('highlight')
    openCellsCount++;
    const count = getAdjacentMines(index);  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥

    if (count > 0) {
        cell.innerHTML = count;  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
    } else {
        openAdjacentCells(index);  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏, –µ—Å–ª–∏ –º–∏–Ω —Ä—è–¥–æ–º –Ω–µ—Ç
    }
}

function openAdjacentCells(index) {
    const currentLevel = levels[level - 1];
    const directions = [
        { row: -1, col: -1 }, { row: -1, col: 0 }, { row: -1, col: 1 },
        { row: 0, col: -1 },                       { row: 0, col: 1 },
        { row: 1, col: -1 }, { row: 1, col: 0 }, { row: 1, col: 1 }
    ];

    directions.forEach(dir => {
        let newRow = Math.floor(index / currentLevel.cols) + dir.row;
        let newCol = (index % currentLevel.cols) + dir.col;
        let newIndex = newRow * currentLevel.cols + newCol;

        if (newRow >= 0 && newRow < currentLevel.rows && newCol >= 0 && newCol < currentLevel.cols) {
            const cell = cells[newIndex];
            if (!cell.classList.contains('open')) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞
                openCell(newIndex);  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω—é—é —è—á–µ–π–∫—É
            }
        }
    });
}

function getAdjacentMines(index) {
    const currentLevel = levels[level - 1];
    let count = 0;

    const directions = [
        { row: -1, col: -1 }, { row: -1, col: 0 }, { row: -1, col: 1 },
        { row: 0, col: -1 },                       { row: 0, col: 1 },
        { row: 1, col: -1 }, { row: 1, col: 0 }, { row: 1, col: 1 }
    ];

    directions.forEach(dir => {
        let newRow = Math.floor(index / currentLevel.cols) + dir.row;
        let newCol = (index % currentLevel.cols) + dir.col;
        let newIndex = newRow * currentLevel.cols + newCol;

        if (newRow >= 0 && newRow < currentLevel.rows && newCol >= 0 && newCol < currentLevel.cols && mines.includes(newIndex)) {
            count++;
        }
    });

    return count;
}
function highlightPotentialMines(index) {
    const currentLevel = levels[0];  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const directions = [
        { row: -1, col: -1 }, { row: -1, col: 0 }, { row: -1, col: 1 },
        { row: 0, col: -1 },                       { row: 0, col: 1 },
        { row: 1, col: -1 }, { row: 1, col: 0 }, { row: 1, col: 1 }
    ];

    const cell = cells[index];
    const count = parseInt(cell.innerHTML) || 0;  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, —Ç–æ —Å—á–∏—Ç–∞–µ–º 0)
    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ ${index}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: ${count}`);

    let flagCount = 0;

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤ –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏
    directions.forEach(dir => {
        let newRow = Math.floor(index / currentLevel.cols) + dir.row;
        let newCol = (index % currentLevel.cols) + dir.col;
        let newIndex = newRow * currentLevel.cols + newCol;

        if (newRow >= 0 && newRow < currentLevel.rows && newCol >= 0 && newCol < currentLevel.cols) {
            const neighborCell = cells[newIndex];
            if (neighborCell.classList.contains('flag')) {
                flagCount++;
            }
        }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤
    console.log(`–§–ª–∞–∂–∫–æ–≤ –≤–æ–∫—Ä—É–≥: ${flagCount}`);

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤ —É–∂–µ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∏–Ω, –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –∫–ª–µ—Ç–∫–∏
    if (flagCount === count) {
        console.log("–§–ª–∞–∂–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–ª–µ—Ç–∫–∏.");
        return;
    }

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–∫—Ä—ã—Ç—ã –∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏
    directions.forEach(dir => {
        let newRow = Math.floor(index / currentLevel.cols) + dir.row;
        let newCol = (index % currentLevel.cols) + dir.col;
        let newIndex = newRow * currentLevel.cols + newCol;

        if (newRow >= 0 && newRow < currentLevel.rows && newCol >= 0 && newCol < currentLevel.cols) {
            const neighborCell = cells[newIndex];

            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
            console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–µ—Ç–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${newIndex} (—Ä—è–¥ ${newRow}, –∫–æ–ª–æ–Ω–∫–∞ ${newCol})`);

            // –ï—Å–ª–∏ —Å–æ—Å–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–∂–∫–æ–º, —Ç–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
            if (!neighborCell.classList.contains('open') && !neighborCell.classList.contains('flag')) {
                neighborCell.classList.add('highlight');
                console.log(`–ü–æ–¥—Å–≤–µ—á–µ–Ω–∞ –∫–ª–µ—Ç–∫–∞ ${newIndex}`);
            }
        }
    });

    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        directions.forEach(dir => {
            let newRow = Math.floor(index / currentLevel.cols) + dir.row;
            let newCol = (index % currentLevel.cols) + dir.col;
            let newIndex = newRow * currentLevel.cols + newCol;

            if (newRow >= 0 && newRow < currentLevel.rows && newCol >= 0 && newCol < currentLevel.cols) {
                const neighborCell = cells[newIndex];
                neighborCell.classList.remove('highlight');
                console.log(`–£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —É –∫–ª–µ—Ç–∫–∏ ${newIndex}`);
            }
        });
    }, 500);
}




function revealMines() {
    mines.forEach(index => {
        const cell = cells[index];
        cell.classList.add('open');  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω—É
        cell.innerHTML = 'üí•';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –º–∏–Ω—ã
    });
}

function checkWin() {
    const currentLevel = levels[level - 1];
    const unopenedCells = Array.from(cells).filter(cell => !cell.classList.contains('open') && !cell.classList.contains('flag'));

    if (unopenedCells.length === currentLevel.mines) {
        clearInterval(timer);
        if (level < levels.length) {
            level++;
            startGame();
        } else {
            showGameOverModal('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
        }
    }
}

function startTimer() {
    timer = setInterval(() => {
        levels[level - 1].time--;
        document.getElementById('timer').innerText = formatTime(levels[level - 1].time);

        if (levels[level - 1].time <= 0) {
            clearInterval(timer);
            showGameOverModal('–í—Ä–µ–º—è –≤—ã—à–ª–æ!');
        }
    }, 1000);
}

function formatTime(time) {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
}

function showGameOverModal(message) {
    alert(message);
    startGame();
}

document.getElementById('start-button').addEventListener('click', startGame);
